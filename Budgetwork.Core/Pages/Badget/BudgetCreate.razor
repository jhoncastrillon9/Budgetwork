@page "/BudgetCreate"
@using Entities = Badgetwork.Infrastructure.Entities;
@inject BaseService<Entities.Badget> _BadgetService
@inject BaseService<Entities.UnitaryPrice> _UnitaryPriceService
@inject NotificationService notificationService
@inject DialogService dialogService
@inject NavigationManager NavManager

<h1>Crear nuevo presupuesto</h1>
<div class="row" style="margin-right: 0px; margin-left: 0px;">
    <div style="margin-right: 15px;">
        <RadzenTextBox Placeholder="Nombre del presupuesto" @bind-Value="@entity.BadgetName" MaxLength="50" Style="margin-bottom: 20px" />
    </div>
</div>
<h3 style="font-weight:600">Datos del Cliente</h3>
<div class="row" style="margin-right: 0px; margin-left: 0px;">
    <div style="margin-right: 15px;">
        <RadzenTextBox Placeholder="Nombre" @bind-Value="@entity.CustomerName" MaxLength="50" Style="margin-bottom: 20px" />
    </div>
    <div style="margin-right: 15px;">
        <RadzenDropDown Placeholder="Tipo de documento" Data="@(typesDocument)"
                        TextProperty="typesDocument" @bind-Value="@entity.TypeDocument" ValueProperty="typesDocument" Style="margin-bottom: 20px" />
    </div>
    <div style="margin-right: 15px;">
        <RadzenTextBox Placeholder="Documento" @bind-Value="@entity.Document" MaxLength="50" Style="margin-bottom: 20px" />
    </div>
    <div style="margin-right: 15px;">
        <RadzenTextBox Placeholder="Dirección" @bind-Value="@entity.Address" MaxLength="50" Style="margin-bottom: 20px" />
    </div>
</div>
<div style="margin-right:10px">
    <h3 style="font-weight:600">Items</h3>
</div>
<div class="row" style="margin-right: 0px; margin-left: 0px;">

    <RadzenAutoComplete Placeholder="Buscar y agregar un item..."
                        Data="@lisAPU"
                        Change="@(args => AddBadgetItem(args))"
                        TextProperty="Item"
                        @bind-Value="search_item" 
                        Style="width: 500px;margin-right: 15px;"/>


    <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                  Size="ButtonSize.Medium"
                  Text="Agregar Item Nuevo">
    </RadzenButton>
</div>

<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Descripción</th>
            <th scope="col">Cantidad</th>
            <th scope="col">Precio Unitario</th>
            <th scope="col">Subtotal</th>
            <th scope="col"></th>
        </tr>
    </thead>
    <tbody>
        @{int loop = 0; }
        @foreach (var item in badgetItems.ToList())
        {
            loop++;
            <tr>
                <th scope="row">@loop</th>
                <td>@item.Descripcion</td>
                <td>@item.Quantity</td>
                <td>@item.Price</td>
                <td>@(item.Price*item.Quantity)</td>
                <td>Borrar Editar</td>
            </tr>
        }

        <tr>
            <th scope="row"></th>
            <td> <RadzenTextBox Placeholder="Descripción" Style="margin-bottom: 20px" /></td>
            <td> <RadzenNumeric data Placeholder="Cantidad" i TValue="int" Style="margin-bottom: 20px" /></td>
            <td> <RadzenNumeric Name="price" Placeholder="Precio" TValue="int" Style="margin-bottom: 20px" /></td>
            <td>$10.00</td>
            <td>
                <RadzenButton ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Small" Text="Guardar">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Info" Size="ButtonSize.Small" Text="Limpiar">
                </RadzenButton>
            </td>
        </tr>

        <tr>
            <th scope="row"></th>
            <td> </td>
            <td> </td>
            <td align="right" style="font-weight:600">Subtotal:</td>
            <td>$@badgetItems.Sum(x => x.Subtotal)</td>
            <td> </td>
        </tr>
    </tbody>
</table>




@code {
    private List<string> typesDocument = new List<string>() { "Cedula de Ciudadania", "Cedula de Extranjeria", "Pasaporte" };
    private Entities.Badget entity = new Entities.Badget();
    private List<Entities.BadgetItem> badgetItems = new List<Entities.BadgetItem>();
    private IEnumerable<Entities.UnitaryPrice> lisAPU;
    public string search_item { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            lisAPU = await _UnitaryPriceService.GetAll();

        }
        catch (global::System.Exception)
        {

            throw;
        }
    }

    private void AddBadgetItem(object item)
    {

        var aup = lisAPU.Where(x => x.Item == item.ToString()).FirstOrDefault();
        if (aup != null)
        {
            badgetItems.Insert(0, new Entities.BadgetItem
            {
                Chapter = aup.Chapter,
                Descripcion = aup.Item,
                Price = aup.Price,
                Measure = aup.Measure,
                Quantity = 1,
                Subtotal = aup.Price * 1

            });

            this.search_item = null;
        }



    }

}
