@page "/BudgetCreate"
@using Entities = Badgetwork.Infrastructure.Entities;
@inject BaseService<Entities.Badget> _BadgetService
@inject BaseService<Entities.UnitaryPrice> _UnitaryPriceService
@inject NotificationService notificationService
@inject DialogService dialogService
@inject NavigationManager NavManager

<style>
    .ui-datatable-data td .ui-cell-data {
        white-space: normal !important;
    }
</style>

<h1>Crear nuevo presupuesto</h1>
<div class="row" style="margin-right: 0px; margin-left: 0px;">
    <div style="margin-right: 15px;">
        <RadzenTextBox Placeholder="Nombre del presupuesto" @bind-Value="@entity.BadgetName" MaxLength="50" Style="margin-bottom: 20px" />
    </div>
</div>
<h3 style="font-weight:600">Datos del Cliente</h3>
<div class="row" style="margin-right: 0px; margin-left: 0px;">
    <div style="margin-right: 15px;">
        <RadzenTextBox Placeholder="Nombre" @bind-Value="@entity.CustomerName" MaxLength="50" Style="margin-bottom: 20px" />
    </div>
    <div style="margin-right: 15px;">
        <RadzenDropDown Placeholder="Tipo de documento" Data="@(typesDocument)"
                        TextProperty="typesDocument" @bind-Value="@entity.TypeDocument" ValueProperty="typesDocument" Style="margin-bottom: 20px" />
    </div>
    <div style="margin-right: 15px;">
        <RadzenTextBox Placeholder="Documento" @bind-Value="@entity.Document" MaxLength="50" Style="margin-bottom: 20px" />
    </div>
    <div style="margin-right: 15px;">
        <RadzenTextBox Placeholder="Dirección" @bind-Value="@entity.Address" MaxLength="50" Style="margin-bottom: 20px" />
    </div>
</div>
<div style="margin-right:10px">
    <h3 style="font-weight:600">Items</h3>
</div>
<div class="row" style="margin-right: 0px; margin-left: 0px;">

    <RadzenAutoComplete Placeholder="Buscar y agregar un item..."
                        Data="@lisAPU"
                        Change="@(args => AddBadgetItem(args))"
                        TextProperty="Item"
                        @bind-Value="search_item"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        Style="width: 500px;margin-right: 15px;" />


    <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                  Size="ButtonSize.Medium"
                  Text="Agregar Item Nuevo">
    </RadzenButton>
</div>

<div style="margin-bottom:80px">
    <RadzenGrid AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowPaging="true"
                PageSize="10"
                AllowSorting="true"
                Data="@badgetItems"
                TItem="Entities.BadgetItem"
                EditMode="DataGridEditMode.Single"
                @ref="itemsGrid">
        <Columns>
            <RadzenGridColumn TItem="Entities.BadgetItem" Property="Chapter" Title="Capitulo">
                <EditTemplate Context="item">
                    <RadzenTextBox @bind-Value="item.Chapter" Style="width:100%; display: block" Name="ShipName" />
                    <RadzenRequiredValidator Text="Capitulo del item es requerido" Component="Chapter" Popup="true" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Entities.BadgetItem" Property="Descripcion" Title="Descripción">
                <EditTemplate Context="item">
                    <RadzenTextBox @bind-Value="item.Descripcion" Style="width:100%; display: block" Name="Descripcion" />
                    <RadzenRequiredValidator Text="Descripcion del item es requerido" Component="Descripcion" Popup="true" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Entities.BadgetItem" Property="Measure" Title="Unidad">
                <EditTemplate Context="item">
                    <RadzenDropDown @bind-Value="item.Measure" Data="@listMeasure" TextProperty="Measure" ValueProperty="Measure" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Entities.BadgetItem" Property="Quantity" Title="Cantidad">
                <EditTemplate Context="item">
                    <RadzenNumeric @bind-Value="item.Quantity" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Entities.BadgetItem" Property="Price" Title="Precio unitario">
                <Template Context="data">
                    @String.Format(new System.Globalization.CultureInfo("es-CO"), "{0:C0}", data.Price)
                </Template>
                <EditTemplate Context="item">
                    <RadzenNumeric @bind-Value="item.Price" Style="width:100%" />
                </EditTemplate>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Entities.BadgetItem" Property="Subtotal" Title="Subtotal">
                <Template Context="data">
                    @String.Format(new System.Globalization.CultureInfo("es-CO"), "{0:C0}", (data.Quantity * data.Price))
                </Template>
                <FooterTemplate>
                    Total: <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C0}", badgetItems.Sum(o => o.Subtotal))</b>
                </FooterTemplate>
            </RadzenGridColumn>

            <RadzenGridColumn TItem="Entities.BadgetItem"
                              Context="Badgets"
                              Bubble="false"
                              Filterable="false"
                              Sortable="false"
                              TextAlign="TextAlign.Center">
                <Template Context="item">
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Small" Text="Editar" Click="@(args => EditRow(item))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" Text="Eliminar" Click="@(args => DeleteRow(item))">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="item">
                    <RadzenButton Text="Guardar Cambios" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Click="@((args) => SaveRow(item))">
                    </RadzenButton>
                    <RadzenButton Text="Cancelar" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="@((args) => CancelEdit(item))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>

</div>

@foreach (var item in badgetItems)
{
    <span>@item.Chapter</span>
    <span>@item.Descripcion</span>
    <span>@item.Quantity</span>
    <span>@item.Price</span>
    <span>@item.Subtotal</span>
}

@code {
    private List<string> typesDocument = new List<string>() { "Cedula de Ciudadania", "Cedula de Extranjeria", "Pasaporte" };
    private List<string> listMeasure = new List<string>() { "M2", "M3", "ML", "UND", "KG", "MES", "JGO", "HR", "CARGA", "KM", "HA", "UN", "M3-KM", "TON-M", "LT" };
    private Entities.Badget entity = new Entities.Badget();
    private List<Entities.BadgetItem> badgetItems = new List<Entities.BadgetItem>();
    private IEnumerable<Entities.UnitaryPrice> lisAPU;
    public string search_item { get; set; }
    RadzenGrid<Entities.BadgetItem> itemsGrid;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            lisAPU = await _UnitaryPriceService.GetAll();

        }
        catch (global::System.Exception)
        {

            throw;
        }
    }

    private void EditRow(Entities.BadgetItem badgetItem)
    {
        itemsGrid.EditRow(badgetItem);
    }

    private void SaveRow(Entities.BadgetItem badgetItem)
    {
        badgetItem.Subtotal = badgetItem.Price * badgetItem.Quantity;
        itemsGrid.UpdateRow(badgetItem);
        itemsGrid.Reload();
        itemsGrid.CancelEditRow(badgetItem);
    }

    private void CancelEdit(Entities.BadgetItem badgetItem)
    {
        itemsGrid.CancelEditRow(badgetItem);
        itemsGrid.Reload();
    }

    private void DeleteRow(Entities.BadgetItem badgetItem)
    {
        badgetItems.Remove(badgetItem);
        itemsGrid.Reload();
    }

    private void AddBadgetItem(object item)
    {

        var aup = lisAPU.Where(x => x.Item == item.ToString()).FirstOrDefault();
        if (aup != null)
        {
            badgetItems.Insert(0, new Entities.BadgetItem
            {
                ExtraGuid = Guid.NewGuid(),
                Chapter = aup.Chapter,
                Descripcion = aup.Item,
                Price = aup.Price,
                Measure = aup.Measure,
                Quantity = 1,
                Subtotal = aup.Price * 1

            });

            this.search_item = null;
        }

        itemsGrid.Reload();


    }

}
